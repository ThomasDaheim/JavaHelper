// support for javafx11 - see https://openjfx.io/openjfx-docs/#gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.osdetector'
apply plugin: 'maven'
apply plugin: 'maven-publish'

// see https://github.com/kelemen/netbeans-gradle-project/issues/179
apply plugin: 'idea'
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}


ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'tf.helper.test.TestGridComboBox'
}
mainClassName = 'tf.helper.test.TestGridComboBox'
group='tf.JavaHelper'
version='1.6'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
//    def javafx_version='11.0.2'
    def javafx_version='14'
    compile "org.openjfx:javafx-base:$javafx_version:$platform"
    compile "org.openjfx:javafx-graphics:$javafx_version:$platform"
    compile "org.openjfx:javafx-controls:$javafx_version:$platform"
    compile "org.openjfx:javafx-fxml:$javafx_version:$platform"
    compile "org.openjfx:javafx-swing:$javafx_version:$platform"
    compile "org.openjfx:javafx-web:$javafx_version:$platform"
    compile "org.openjfx:javafx-media:$javafx_version:$platform"

    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.commons:commons-lang3:3.9'

    compile group: 'org.controlsfx', name: 'controlsfx', version: '11.0.1'
   
    testCompile "org.testfx:testfx-junit:4.0.+"
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.1'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.graphics,javafx.base,javafx.fxml,javafx.web,javafx.swing,javafx.media',
                '-Xlint:unchecked',
                '-Xlint:deprecation',
        ]
    }
}

// see https://github.com/kelemen/netbeans-gradle-project/issues/403 on how to extend gradle tasks
def newArgs = [ '--add-modules', 'javafx.controls,javafx.graphics,javafx.base,javafx.fxml,javafx.web,javafx.swing,javafx.media',
                // various exports needed at run time - see https://stackoverflow.com/a/52142071
                '--add-exports', 'javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.reflect=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.beans=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.logging=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.collections=ALL-UNNAMED',
                '--add-exports', 'javafx.base/com.sun.javafx.event=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.prism=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
                '--add-exports', 'javafx.media/com.sun.media.jfxmedia=ALL-UNNAMED',
                '--add-exports', 'javafx.media/com.sun.media.jfxmedia.events=ALL-UNNAMED',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.inputmap=ALL-UNNAMED',
                '--add-exports', 'javafx.controls/com.sun.javafx.charts=ALL-UNNAMED',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.scene.input=ALL-UNNAMED',
                '--add-opens', 'javafx.graphics/javafx.scene.layout=ALL-UNNAMED',
    ]
    
// extend Netbeans Gradle "Run" task
run {
    doFirst {
        jvmArgs = jvmArgs.plus(['--module-path', classpath.asPath,])
        jvmArgs = jvmArgs.plus(newArgs)
        jvmArgs '-Xss80M'
        enableAssertions = true
    }
}

test {
    // https://stackoverflow.com/a/35467005
    testLogging.showStandardStreams true;   
}

// extend Netbeans Gradle "Debug" task
task(debug, dependsOn: 'classes', type: JavaExec) {
    doFirst {
        main = 'tf.gpx.edit.main.GPXEditorManager'
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs = jvmArgs.plus([
                '--module-path', classpath.asPath,
                "-Xdebug",
                "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005",
        ])
        jvmArgs = jvmArgs.plus(newArgs)
    }
}

jar {
    manifest {
        attributes(
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-JDK'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'App-Name'       : group,
            'App-Version'    : version,
            'App-URL'        : "https://github.com/ThomasDaheim/JavaHelper"
        )
    }
}

build.finalizedBy(install)
